<?php



interface IRouteFactory{
    public function registerRoute($namespace, $route, $method, $controller);
}

Class RouteFactory implements IRouteFactory{


    public function __construct()
    {
        echo "Inside factory constuctor";
        // add_action( 'rest_api_init', "registerRoute" );
        // add_action( 'rest_api_init', [ $this, 'registerRoute' ] );
    }

    public function my_awesome_func( $data ) {
        return "Hello user!";
    } 
    

    // @method registerRoute
    // @description Register a new route
    // @params $namespace: 'myplugin/v1', 
    // @params $route '/author',  
    // @params $method: GET.
    // @params $controller: controllerFunction
    public function registerRoute($namespace, $route, $method, $controller) {
        echo "<br> Inside registerRoute";
        if(is_callable($controller)){
            echo "<br> controller is callable";
            // $namespace = trim( $namespace, '/' );
            echo "<br>" , $namespace, " ", $route, " ", $method;
            // $defaults = array(
            //     'methods'  => $method,
            //     'callback' => $controller,
            //     'args'     => array(),
            // );
            // register_rest_route( $namespace, $route, $defaults);

            // register_rest_route( 'hypersign/v1', '/author1', array(
            //     'methods' => 'GET',
            //     'callback' => $controller,
            //   ) );

            // function my_awesome_func( $data ) {
            //     return "Hello user!";
            // } 
            

            add_action( 'rest_api_init', function ($namespace, $route, $method, $controller) {
                register_rest_route( $namespace, $route, array(
                  'methods' => $method,
                  'callback' =>  null,
                ) );
              } );
        }else{
            echo "<br> controller is not callable";
        }
		
	}

}


